<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Jupiter Swapper (Affiliate Referral)</title>
  <script src="https://unpkg.com/@solana/web3.js@1.95.1/lib/index.iife.min.js"></script>
  <style>
    body { font-family: sans-serif; background: #0b0e11; color: #eaeaea; text-align: center; padding: 2rem; }
    input, select, button { margin: 0.5rem; padding: 0.6rem; font-size: 1rem; border-radius: 8px; border: none; }
    button { background: #6366f1; color: white; cursor: pointer; }
    button:hover { background: #4f46e5; }
    button:disabled { background: #4b5563; cursor: not-allowed; }
    .row { margin-top: 1rem; }
    a { color: #818cf8; }
    .info, .fee-controls, .debug {
      background: #1e293b; padding: 1rem; border-radius: 8px;
      margin: 1rem auto; max-width: 600px;
    }
    .fee-display { font-size: 1.5rem; font-weight: bold; color: #818cf8; margin: 0.5rem 0; }
    input[type="number"].fee-input {
      width: 100px; text-align: center;
      background: #0b0e11; color: #eaeaea; border: 2px solid #4f46e5;
    }
    input[type="checkbox"] { width: 20px; height: 20px; cursor: pointer; }
    #status { margin-top: 1rem; padding: 1rem; border-radius: 8px; min-height: 20px; }
    .error { color: #ef4444; } .success { color: #10b981; }
    .controls-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; max-width: 600px; margin: 1rem auto; }
    .debug { font-size: 0.85rem; text-align: left; font-family: monospace; max-height: 300px; overflow-y: auto; }
  </style>
</head>
<body>
  <h1>Jupiter Swapper (Affiliate Tracking)</h1>

  <div class="info">
    <p><strong>üîó Affiliate Referral Vault:</strong></p>
    <p style="font-size: 0.8rem; word-break: break-all;">5LmFGjbae5iWejFVT8UiRLggh1me22nTetmere8SjwKy</p>
    <div style="margin-top: 1rem;">
      <label><input type="checkbox" id="useReferral" /> Enable Referral Fee (uncheck if swaps fail)</label>
    </div>
  </div>

  <div class="controls-grid">
    <div class="fee-controls">
      <p><strong>üí∞ Platform Fee</strong></p>
      <div class="fee-display"><span id="feePercent">0.85</span>%</div>
      <input type="number" id="feeInput" class="fee-input" min="0" max="1000" value="85" step="5" />
      <p style="font-size: 0.8rem; color: #94a3b8;">bps (85 = 0.85%)</p>
    </div>
    <div class="fee-controls">
      <p><strong>üìä Slippage</strong></p>
      <div class="fee-display"><span id="slippagePercent">1.00</span>%</div>
      <input type="number" id="slippageInput" class="fee-input" min="10" max="5000" value="100" step="50" />
      <p style="font-size: 0.8rem; color: #94a3b8;">bps (100 = 1%)</p>
    </div>
  </div>

  <div class="row">
    <label>From:</label>
    <select id="inputMint">
      <option value="So11111111111111111111111111111111111111112">SOL</option>
      <option value="EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v">USDC</option>
      <option value="Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB">USDT</option>
    </select>
  </div>

  <div class="row">
    <label>To:</label>
    <select id="outputMint">
      <option value="EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v">USDC</option>
      <option value="Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB">USDT</option>
      <option value="So11111111111111111111111111111111111111112">SOL</option>
    </select>
  </div>

  <div class="row">
    <label>Amount:</label>
    <input id="amount" type="number" placeholder="Enter amount" step="0.01" />
  </div>

  <p id="balance">Balance: ‚Äî</p>
  <p id="estimate">Estimated output: ‚Äî</p>

  <button id="connect">Connect Wallet</button>
  <button id="swap" disabled>Swap</button>

  <p id="status"></p>
  <div id="debug" class="debug" style="display: none;"></div>

  <script>
    const REFERRAL_ACCOUNT = "5LmFGjbae5iWejFVT8UiRLggh1me22nTetmere8SjwKy";
    const REFERRAL_PROGRAM_ID = "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4";
    const RPC_ENDPOINTS = ["https://api.mainnet-beta.solana.com"];
    let connection = new solanaWeb3.Connection(RPC_ENDPOINTS[0], 'confirmed');

    let walletPublicKey = null, isWalletConnected = false;

    const TOKEN_DECIMALS = {
      "So11111111111111111111111111111111111111112": 9,
      "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v": 6,
      "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB": 6,
    };

    let platformFeeBps = parseInt(localStorage.getItem("platformFeeBps")) || 85;
    let slippageBps = parseInt(localStorage.getItem("slippageBps")) || 100;

    const updateFeeDisplay = bps => document.getElementById("feePercent").textContent = (bps / 100).toFixed(2);
    const updateSlippageDisplay = bps => document.getElementById("slippagePercent").textContent = (bps / 100).toFixed(2);
    updateFeeDisplay(platformFeeBps); updateSlippageDisplay(slippageBps);

    document.getElementById("feeInput").oninput = e => {
      platformFeeBps = parseInt(e.target.value) || 85;
      localStorage.setItem("platformFeeBps", platformFeeBps);
      updateFeeDisplay(platformFeeBps); getEstimate();
    };
    document.getElementById("slippageInput").oninput = e => {
      slippageBps = parseInt(e.target.value) || 100;
      localStorage.setItem("slippageBps", slippageBps);
      updateSlippageDisplay(slippageBps); getEstimate();
    };

    const debugLog = msg => {
      const d = document.getElementById("debug");
      d.style.display = "block"; const t = new Date().toLocaleTimeString();
      d.innerHTML += `<div>[${t}] ${msg}</div>`; console.log(`[${t}]`, msg);
    };

    async function connectWallet() {
      if (!window.solana) return alert("‚ö†Ô∏è No wallet detected!");
      if (isWalletConnected) return disconnectWallet();

      try {
        const resp = await window.solana.connect();
        walletPublicKey = resp.publicKey.toBase58();
        isWalletConnected = true;
        document.getElementById("status").innerHTML = `‚úÖ Connected: <b>${walletPublicKey.slice(0, 4)}...${walletPublicKey.slice(-4)}</b>`;
        document.getElementById("connect").innerText = "Disconnect";
        document.getElementById("swap").disabled = false;
        await updateBalance();
      } catch (err) {
        document.getElementById("status").innerHTML = `<span class="error">‚ùå ${err.message}</span>`;
      }
    }

    async function disconnectWallet() {
      if (window.solana?.isConnected) await window.solana.disconnect();
      walletPublicKey = null; isWalletConnected = false;
      document.getElementById("status").innerText = "Disconnected";
      document.getElementById("connect").innerText = "Connect Wallet";
      document.getElementById("swap").disabled = true;
    }

    async function updateBalance() {
      if (!walletPublicKey) return;
      const mint = document.getElementById("inputMint").value;
      let bal = 0;
      try {
        if (mint === "So11111111111111111111111111111111111111112")
          bal = (await connection.getBalance(new solanaWeb3.PublicKey(walletPublicKey))) / 1e9;
        else {
          const accs = await connection.getParsedTokenAccountsByOwner(new solanaWeb3.PublicKey(walletPublicKey), { mint: new solanaWeb3.PublicKey(mint) });
          if (accs.value.length > 0) bal = accs.value[0].account.data.parsed.info.tokenAmount.uiAmount;
        }
        document.getElementById("balance").innerText = `Balance: ${bal.toFixed(6)}`;
      } catch { document.getElementById("balance").innerText = "Balance: Error"; }
    }

    async function getEstimate() {
      const inputMint = document.getElementById("inputMint").value;
      const outputMint = document.getElementById("outputMint").value;
      const uiAmount = parseFloat(document.getElementById("amount").value);
      if (!uiAmount || uiAmount <= 0) return document.getElementById("estimate").innerText = "Estimated output: ‚Äî";
      const decimals = TOKEN_DECIMALS[inputMint] || 6;
      const amount = Math.floor(uiAmount * 10 ** decimals);
      const useReferral = document.getElementById("useReferral").checked;

      let url = `https://lite-api.jup.ag/swap/v1/quote?inputMint=${inputMint}&outputMint=${outputMint}&amount=${amount}&slippageBps=${slippageBps}`;
      if (useReferral) url += `&platformFeeBps=${platformFeeBps}`;
      try {
        const quote = await fetch(url).then(r => r.json());
        const outDecimals = TOKEN_DECIMALS[outputMint] || 6;
        document.getElementById("estimate").innerText = `Estimated output: ‚âà ${(quote.outAmount / 10 ** outDecimals).toFixed(6)}`;
      } catch { document.getElementById("estimate").innerText = "Estimated output: Error"; }
    }

    async function swap() {
      if (!walletPublicKey) return alert("Connect wallet first!");
      const inputMint = document.getElementById("inputMint").value;
      const outputMint = document.getElementById("outputMint").value;
      const uiAmount = parseFloat(document.getElementById("amount").value);
      if (!uiAmount || uiAmount <= 0) return alert("Enter valid amount");

      const decimals = TOKEN_DECIMALS[inputMint] || 6;
      const amount = Math.floor(uiAmount * 10 ** decimals);
      const useReferral = document.getElementById("useReferral").checked;

      debugLog(`Referral: ${useReferral}, Fee: ${platformFeeBps}bps, Slippage: ${slippageBps}`);
      let quoteUrl = `https://lite-api.jup.ag/swap/v1/quote?inputMint=${inputMint}&outputMint=${outputMint}&amount=${amount}&slippageBps=${slippageBps}`;
      if (useReferral) quoteUrl += `&platformFeeBps=${platformFeeBps}`;
      const quote = await fetch(quoteUrl).then(r => r.json());

      const swapBody = {
        userPublicKey: walletPublicKey,
        wrapAndUnwrapSol: true,
        quoteResponse: quote,
        swapMode: "ExactIn",
        dynamicComputeUnitLimit: true,
        prioritizationFeeLamports: "auto",
      };

      if (useReferral) {
        swapBody.platformFeeBps=
      platformFeeBps;
        swapBody.feeacount:
      REFERRAL_ACCOUNT;

        debugLog("Referral vault added (new format) ‚úÖ");
      }

      debugLog("Building and sending transaction...");

      const res = await fetch("https://lite-api.jup.ag/swap/v1/swap", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(swapBody),
      });

      if (!res.ok) {
        const errText = await res.text();
        debugLog(`‚ùå Jupiter API Error (${res.status}): ${errText}`);
        document.getElementById("status").innerHTML = `<span class="error">‚ùå Jupiter API Error (${res.status})</span>`;
        return;
      }

      const swapRes = await res.json();
      if (!swapRes.swapTransaction) {
        debugLog("‚ùå No swapTransaction returned from API");
        document.getElementById("status").innerHTML = `<span class="error">‚ùå No swapTransaction returned</span>`;
        return;
      }

      try {
        const tx = solanaWeb3.VersionedTransaction.deserialize(
          Uint8Array.from(atob(swapRes.swapTransaction), c => c.charCodeAt(0))
        );
        const signedTx = await window.solana.signTransaction(tx);
        const sig = await connection.sendRawTransaction(signedTx.serialize());
        document.getElementById("status").innerHTML = `‚úÖ <a href="https://solscan.io/tx/${sig}" target="_blank">View TX</a>`;
        await connection.confirmTransaction(sig, "confirmed");
        await updateBalance();
      } catch (err) {
        debugLog(`‚ùå Transaction error: ${err.message}`);
        document.getElementById("status").innerHTML = `<span class="error">‚ùå ${err.message}</span>`;
      }
    }

    document.getElementById("connect").onclick = connectWallet;
    document.getElementById("swap").onclick = swap;
    document.getElementById("inputMint").onchange = updateBalance;
    document.getElementById("amount").oninput = getEstimate;
    document.getElementById("outputMint").onchange = getEstimate;
    document.getElementById("useReferral").onchange = getEstimate;
  </script>
</body>
</html>