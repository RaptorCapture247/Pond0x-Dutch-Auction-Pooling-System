<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Jupiter Swapper (Referral Fees)</title>
  <script src="https://unpkg.com/@solana/web3.js@1.95.1/lib/index.iife.min.js"></script>
  <style>
    body { font-family: sans-serif; background: #0b0e11; color: #eaeaea; text-align: center; padding: 2rem; }
    input, select, button { margin: 0.5rem; padding: 0.6rem; font-size: 1rem; border-radius: 8px; border: none; }
    button { background: #6366f1; color: white; cursor: pointer; }
    button:hover { background: #4f46e5; }
    button:disabled { background: #4b5563; cursor: not-allowed; }
    .row { margin-top: 1rem; }
    a { color: #818cf8; }
    .info { background: #1e293b; padding: 1rem; border-radius: 8px; margin: 1rem auto; max-width: 600px; font-size: 0.9rem; }
    .controls { background: #1e293b; padding: 1.5rem; border-radius: 8px; margin: 1rem auto; max-width: 400px; }
    .display { font-size: 1.5rem; font-weight: bold; color: #818cf8; margin: 0.5rem 0; }
    input[type="number"].slider-input { width: 100px; text-align: center; background: #0b0e11; color: #eaeaea; border: 2px solid #4f46e5; }
    #status { margin-top: 1rem; padding: 1rem; border-radius: 8px; min-height: 20px; }
    .error { color: #ef4444; }
    .debug { background: #1e293b; padding: 1rem; border-radius: 8px; margin: 1rem auto; max-width: 600px; font-size: 0.85rem; text-align: left; font-family: monospace; max-height: 300px; overflow-y: auto; }
  </style>
</head>
<body>
  <h1>ü™ê Jupiter Swapper</h1>

  <div class="info">
    <p><strong>Referral Account:</strong></p>
    <p style="font-size: 0.8rem; word-break: break-all;">45ruCyfdRkWpRNGEqWzjCiXRHkZs8WXCLQ67Pnpye7Hp</p>
    <p style="font-size: 0.85rem; color: #94a3b8;">Platform fee: 0.1% sent to referral vault</p>
  </div>

  <div class="controls">
    <p><strong>üìä Slippage Tolerance</strong></p>
    <div class="display"><span id="slippagePercent">5.00</span>%</div>
    <input type="number" id="slippageInput" class="slider-input" min="10" max="10000" value="500" step="100" />
    <p style="font-size: 0.8rem; color: #94a3b8;">bps (500 = 5%)</p>
  </div>

  <div class="row">
    <label>From:</label>
    <select id="inputMint">
      <option value="So11111111111111111111111111111111111111112">SOL</option>
      <option value="EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v">USDC</option>
      <option value="Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB">USDT</option>
    </select>
  </div>

  <div class="row">
    <label>To:</label>
    <select id="outputMint">
      <option value="EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v">USDC</option>
      <option value="Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB">USDT</option>
      <option value="So11111111111111111111111111111111111111112">SOL</option>
    </select>
  </div>

  <div class="row">
    <label>Amount:</label>
    <input id="amount" type="number" placeholder="Enter amount" step="0.01" />
  </div>

  <p id="balance">Balance: ‚Äî</p>
  <p id="estimate">Estimated output: ‚Äî</p>

  <button id="connect">Connect Wallet</button>
  <button id="swap" disabled>Swap</button>

  <p id="status"></p>
  <div id="debug" class="debug" style="display: none;"></div>

  <script>
    const FEE_WALLET = "45ruCyfdRkWpRNGEqWzjCiXRHkZs8WXCLQ67Pnpye7Hp";
    const PLATFORM_FEE_BPS = 10; // 0.1%
    
    const RPC_ENDPOINTS = [
      "https://mainnet.helius-rpc.com/?api-key=public",
      "https://api.mainnet-beta.solana.com"
    ];
    
    let currentRpcIndex = 0;
    let connection = new solanaWeb3.Connection(RPC_ENDPOINTS[currentRpcIndex], 'confirmed');
    let walletPublicKey = null;
    let isWalletConnected = false;

    const TOKEN_DECIMALS = {
      "So11111111111111111111111111111111111111112": 9,
      "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v": 6,
      "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB": 6,
    };

    const TOKEN_PROGRAM_ID = new solanaWeb3.PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
    const ASSOCIATED_TOKEN_PROGRAM_ID = new solanaWeb3.PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");

    let slippageBps = parseInt(localStorage.getItem("slippageBps")) || 500;
    document.getElementById("slippageInput").value = slippageBps;
    
    function updateSlippageDisplay(bps) {
      document.getElementById("slippagePercent").textContent = (bps / 100).toFixed(2);
    }
    updateSlippageDisplay(slippageBps);
    
    document.getElementById("slippageInput").addEventListener("input", (e) => {
      slippageBps = parseInt(e.target.value) || 500;
      localStorage.setItem("slippageBps", slippageBps);
      updateSlippageDisplay(slippageBps);
      getEstimate();
    });

    function debugLog(message) {
      const debugDiv = document.getElementById("debug");
      debugDiv.style.display = "block";
      const timestamp = new Date().toLocaleTimeString();
      debugDiv.innerHTML += `<div>[${timestamp}] ${message}</div>`;
      console.log(`[${timestamp}]`, message);
    }

    function getAssociatedTokenAddress(mint, owner) {
      const [address] = solanaWeb3.PublicKey.findProgramAddressSync(
        [
          owner.toBuffer(),
          TOKEN_PROGRAM_ID.toBuffer(),
          mint.toBuffer(),
        ],
        ASSOCIATED_TOKEN_PROGRAM_ID
      );
      return address;
    }

    async function retryRpcCall(fn, maxRetries = 2) {
      for (let i = 0; i <= maxRetries; i++) {
        try {
          return await fn();
        } catch (err) {
          if (i < maxRetries && err.message?.includes('403')) {
            currentRpcIndex = (currentRpcIndex + 1) % RPC_ENDPOINTS.length;
            connection = new solanaWeb3.Connection(RPC_ENDPOINTS[currentRpcIndex], 'confirmed');
            await new Promise(resolve => setTimeout(resolve, 1000));
          } else {
            throw err;
          }
        }
      }
    }

    async function connectWallet() {
      try {
        if (!window.solana) {
          alert("Please install Phantom or Solflare wallet");
          return;
        }

        if (window.solana.isConnected && window.solana.publicKey) {
          walletPublicKey = window.solana.publicKey.toBase58();
          isWalletConnected = true;
          document.getElementById("status").innerHTML = `‚úÖ Connected: <strong>${walletPublicKey.slice(0, 4)}...${walletPublicKey.slice(-4)}</strong>`;
          document.getElementById("connect").innerText = "Disconnect";
          document.getElementById("swap").disabled = false;
          await updateBalance();
          return;
        }

        const resp = await window.solana.connect();
        walletPublicKey = resp.publicKey.toBase58();
        isWalletConnected = true;
        
        document.getElementById("status").innerHTML = `‚úÖ Connected: <strong>${walletPublicKey.slice(0, 4)}...${walletPublicKey.slice(-4)}</strong>`;
        document.getElementById("connect").innerText = "Disconnect";
        document.getElementById("swap").disabled = false;
        await updateBalance();
        
      } catch (err) {
        document.getElementById("status").innerHTML = `<span class="error">‚ùå ${err.message}</span>`;
      }
    }

    async function disconnectWallet() {
      if (window.solana) await window.solana.disconnect();
      walletPublicKey = null;
      isWalletConnected = false;
      document.getElementById("connect").innerText = "Connect Wallet";
      document.getElementById("swap").disabled = true;
      document.getElementById("status").innerText = "";
      document.getElementById("balance").innerText = "Balance: ‚Äî";
    }

    async function updateBalance() {
      if (!walletPublicKey) return;
      const mint = document.getElementById("inputMint").value;
      let balanceUI = 0;

      try {
        if (mint === "So11111111111111111111111111111111111111112") {
          const solBalance = await retryRpcCall(async () => {
            return await connection.getBalance(new solanaWeb3.PublicKey(walletPublicKey));
          });
          balanceUI = solBalance / 1e9;
        } else {
          const tokenAccounts = await retryRpcCall(async () => {
            return await connection.getParsedTokenAccountsByOwner(
              new solanaWeb3.PublicKey(walletPublicKey),
              { mint: new solanaWeb3.PublicKey(mint) }
            );
          });
          if (tokenAccounts.value.length > 0) {
            balanceUI = tokenAccounts.value[0].account.data.parsed.info.tokenAmount.uiAmount;
          }
        }
        document.getElementById("balance").innerText = `Balance: ${balanceUI.toFixed(6)}`;
      } catch (err) {
        console.error("Balance error:", err);
        document.getElementById("balance").innerText = `Balance: Error`;
      }
    }

    async function getEstimate() {
      const inputMint = document.getElementById("inputMint").value;
      const outputMint = document.getElementById("outputMint").value;
      const uiAmount = parseFloat(document.getElementById("amount").value);
      
      if (!uiAmount || uiAmount <= 0) {
        document.getElementById("estimate").innerText = "Estimated output: ‚Äî";
        return;
      }

      const decimals = TOKEN_DECIMALS[inputMint] || 6;
      const amount = Math.floor(uiAmount * 10 ** decimals);
      
      try {
        // Try standard Jupiter v6 API
        const url = `https://quote-api.jup.ag/v6/quote?inputMint=${inputMint}&outputMint=${outputMint}&amount=${amount}&slippageBps=${slippageBps}&platformFeeBps=${PLATFORM_FEE_BPS}`;
        
        const quote = await fetch(url).then(r => {
          if (!r.ok) throw new Error(`Quote failed`);
          return r.json();
        });

        const outDecimals = TOKEN_DECIMALS[outputMint] || 6;
        const estOut = quote.outAmount / 10 ** outDecimals;
        document.getElementById("estimate").innerText = `Estimated output: ‚âà ${estOut.toFixed(6)}`;
      } catch (err) {
        console.error("Estimate error:", err);
        document.getElementById("estimate").innerText = "Estimated output: Error";
      }
    }

    async function swap() {
      const inputMint = document.getElementById("inputMint").value;
      const outputMint = document.getElementById("outputMint").value;
      const uiAmount = parseFloat(document.getElementById("amount").value);
      
      if (!walletPublicKey || !isWalletConnected) {
        alert("Connect wallet first");
        return;
      }
      
      if (!uiAmount || uiAmount <= 0) {
        alert("Enter valid amount");
        return;
      }

      document.getElementById("debug").innerHTML = "<strong>üîç Debug:</strong><br>";
      document.getElementById("debug").style.display = "block";

      const decimals = TOKEN_DECIMALS[inputMint] || 6;
      const amount = Math.floor(uiAmount * 10 ** decimals);
      document.getElementById("status").innerText = "üîÑ Getting quote...";
      document.getElementById("swap").disabled = true;

      try {
        debugLog(`Fee: ${PLATFORM_FEE_BPS} bps, Slippage: ${slippageBps} bps`);
        
        // Try Jupiter v6 API
        const quoteUrl = `https://quote-api.jup.ag/v6/quote?inputMint=${inputMint}&outputMint=${outputMint}&amount=${amount}&slippageBps=${slippageBps}&platformFeeBps=${PLATFORM_FEE_BPS}`;
        
        debugLog(`Trying Jupiter v6 API...`);
        const quote = await fetch(quoteUrl).then(r => {
          if (!r.ok) throw new Error(`Quote failed: ${r.status}`);
          return r.json();
        });
        
        debugLog(`‚úì Quote: ${quote.outAmount}`);

        const feeWalletPubkey = new solanaWeb3.PublicKey(FEE_WALLET);
        const outputMintPubkey = new solanaWeb3.PublicKey(outputMint);
        const feeAccount = getAssociatedTokenAddress(outputMintPubkey, feeWalletPubkey);
        
        debugLog(`Fee account: ${feeAccount.toBase58()}`);
        
        document.getElementById("status").innerText = "üìù Building transaction...";

        const swapBody = {
          quoteResponse: quote,
          userPublicKey: walletPublicKey,
          wrapAndUnwrapSol: true,
          feeAccount: feeAccount.toBase58(),
          computeUnitPriceMicroLamports: "auto"
        };

        debugLog(`Calling v6 swap...`);
        
        const swapRes = await fetch("https://quote-api.jup.ag/v6/swap", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(swapBody),
        }).then(r => {
          if (!r.ok) throw new Error(`Swap failed: ${r.status}`);
          return r.json();
        });

        debugLog(`‚úì TX built`);
        document.getElementById("status").innerText = "‚úçÔ∏è Sign...";
        
        const txBytes = Uint8Array.from(atob(swapRes.swapTransaction), c => c.charCodeAt(0));
        const versionedTx = solanaWeb3.VersionedTransaction.deserialize(txBytes);
        const signedTx = await window.solana.signTransaction(versionedTx);
        
        debugLog(`‚úì Signed, sending...`);
        document.getElementById("status").innerText = "üì° Sending...";
        
        const sig = await connection.sendRawTransaction(signedTx.serialize(), {
          skipPreflight: false,
          maxRetries: 2
        });
        
        debugLog(`‚úì TX: ${sig}`);
        document.getElementById("status").innerHTML =
          `‚úÖ <a href="https://solscan.io/tx/${sig}" target="_blank">View</a><br>‚è≥ Confirming...`;

        await connection.confirmTransaction(sig, "confirmed");
        debugLog(`‚úÖ CONFIRMED!`);
        await updateBalance();
        
        document.getElementById("status").innerHTML = `üéâ Complete! Fee sent to referral. <a href="https://solscan.io/tx/${sig}" target="_blank">View</a>`;
      } catch (err) {
        console.error("Swap error:", err);
        debugLog(`‚ùå ${err.message}`);
        document.getElementById("status").innerHTML = `<span class="error">‚ùå ${err.message}</span>`;
      } finally {
        document.getElementById("swap").disabled = false;
      }
    }

    // Event listeners
    document.getElementById("connect").onclick = () => {
      if (isWalletConnected) {
        disconnectWallet();
      } else {
        connectWallet();
      }
    };
    
    document.getElementById("swap").onclick = swap;
    document.getElementById("inputMint").onchange = async () => { 
      await updateBalance(); 
      await getEstimate(); 
    };
    document.getElementById("outputMint").onchange = getEstimate;
    document.getElementById("amount").oninput = getEstimate;

    // Wallet event listeners
    if (window.solana) {
      window.solana.on('connect', (publicKey) => {
        if (!isWalletConnected) {
          walletPublicKey = publicKey.toBase58();
          isWalletConnected = true;
          document.getElementById("connect").innerText = "Disconnect";
          document.getElementById("swap").disabled = false;
          updateBalance();
        }
      });
      
      window.solana.on('disconnect', () => {
        disconnectWallet();
      });

      window.solana.on('accountChanged', (publicKey) => {
        if (publicKey) {
          walletPublicKey = publicKey.toBase58();
          updateBalance();
        } else {
          disconnectWallet();
        }
      });

      setTimeout(() => {
        if (window.solana.isConnected && window.solana.publicKey) {
          connectWallet();
        }
      }, 500);
    }
  </script>
</body>
</html>